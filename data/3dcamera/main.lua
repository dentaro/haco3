  -- 描画する3Dポリゴンの回転角度
  period=24
  frame=0
  crash=0
  points = {}

  --正２０面体生成
--   function createIcosahedron()
--     local phi = (1 + math.sqrt(5)) / 2
  
--     local vertices = {
--       {-1, phi, 0}, {1, phi, 0}, {-1, -phi, 0}, {1, -phi, 0},
--       {0, -1, phi}, {0, 1, phi}, {0, -1, -phi}, {0, 1, -phi},
--       {phi, 0, -1}, {phi, 0, 1}, {-phi, 0, -1}, {-phi, 0, 1}
--     }
  
--     local faces = {
--       {1, 12, 6}, {1, 6, 2}, {1, 2, 8}, {1, 8, 11}, {1, 11, 12},
--       {2, 6, 10}, {6, 12, 5}, {12, 11, 3}, {11, 8, 7}, {8, 2, 9},
--       {4, 10, 5}, {4, 5, 3}, {4, 3, 7}, {4, 7, 9}, {4, 9, 10},
--       {5, 10, 6}, {3, 5, 12}, {7, 3, 11}, {9, 7, 8}, {10, 9, 2}
--     }
  
--     local poly_vertices = {}
  
--     for _, face in ipairs(faces) do
--       for _, index in ipairs(face) do
--         table.insert(poly_vertices, vertices[index])
--       end
--     end
  
--     return poly_vertices
--   end

-- local poly_vertices = createIcosahedron()

poly_vertices = {
  {0, 1, 2},
  {2, 3, 0},
  {4, 5, 6},
  {6, 7, 4},
  {8, 2, 1},
  {5, 4, 9},
  {10, 11, 12},
  {12, 13, 10},
  {14, 15, 16},
  {16, 17, 14},
  {11, 18, 12},
  {14, 19, 15},
  {20, 12, 18},
  {19, 14, 20},
  {18, 21, 20},
  {20, 21, 19},
  {12, 20, 22},
  {23, 20, 14},
  {22, 24, 12},
  {14, 25, 23},
  {12, 24, 13},
  {17, 25, 14},
  {26, 1, 10},
  {10, 13, 26},
  {16, 5, 27},
  {27, 17, 16},
  {1, 26, 8},
  {9, 27, 5},
  {28, 3, 2},
  {4, 7, 29},
  {20, 3, 28},
  {29, 7, 20},
  {20, 30, 22},
  {23, 31, 20},
  {20, 28, 30},
  {31, 29, 20},
  {32, 33, 34},
  {34, 35, 32},
  {32, 36, 37},
  {37, 36, 33},
  {36, 3, 38},
  {38, 7, 36},
  {3, 20, 38},
  {38, 20, 7},
  -- {3, 36, 39},
  -- {40, 36, 7},
  -- {32, 39, 36},
  -- {36, 40, 33},
  -- {39, 32, 35},
  -- {34, 33, 40},
  -- {35, 0, 39},
  -- {0, 3, 39},
  -- {40, 7, 6},
  -- {6, 34, 40},
  -- {33, 32, 37},
  -- {30, 28, 41},
  -- {41, 42, 30},
  -- {43, 29, 31},
  -- {31, 44, 43},
  -- {22, 30, 42},
  -- {42, 45, 22},
  -- {44, 31, 23},
  -- {23, 46, 44},
  -- {23, 47, 46},
  -- {48, 41, 28},
  -- {29, 43, 49},
  -- {28, 2, 50},
  -- {50, 48, 28},
  -- {51, 4, 29},
  -- {29, 49, 51},
  -- {8, 50, 2},
  -- {4, 51, 9},
  -- {26, 13, 52},
  -- {53, 17, 27},
  -- {54, 52, 13},
  -- {17, 53, 55},
  -- {24, 54, 13},
  -- {17, 55, 25},
  -- {24, 22, 45},
  -- {47, 23, 25},
  -- {21, 18, 56},
  -- {57, 19, 21},
  -- {58, 56, 18},
  -- {19, 57, 59},
  -- {18, 11, 58},
  -- {59, 15, 19},
  -- {10, 58, 11},
  -- {15, 59, 16},
  -- {60, 61, 62},
  -- {63, 61, 60},
  -- {35, 34, 60},
  -- {34, 64, 60},
  -- {63, 60, 64},
  -- {0, 60, 62},
  -- {63, 64, 6},
  -- {60, 0, 35},
  -- {34, 6, 64},
  -- {65, 61, 66},
  -- {66, 61, 63},
  -- {61, 65, 62},
  -- {67, 68, 69},
  -- {70, 67, 71},
  -- {71, 72, 70},
  -- {73, 67, 70},
  -- {70, 74, 73},
  -- {67, 69, 71},
  -- {73, 68, 67},
  -- {10, 71, 69},
  -- {68, 73, 16},
  -- {21, 10, 69},
  -- {68, 16, 21},
  -- {21, 69, 68},
  -- {58, 10, 56},
  -- {57, 16, 59},
  -- {10, 21, 56},
  -- {57, 21, 16},
  -- {1, 75, 71},
  -- {71, 10, 1},
  -- {73, 76, 5},
  -- {5, 16, 73},
  -- {71, 75, 72},
  -- {74, 76, 73},
  -- {65, 1, 62},
  -- {65, 77, 1},
  -- {5, 78, 63},
  -- {0, 62, 1},
  -- {5, 63, 6},
  -- {66, 79, 74},
  -- {70, 72, 80},
  -- {80, 66, 70},
  -- {66, 74, 70},
  -- {77, 65, 80},
  -- {66, 63, 78},
  -- {78, 79, 66},
  -- {66, 80, 65},
  -- {81, 82, 83},
  -- {84, 85, 86},
  -- {82, 81, 87},
  -- {87, 88, 82},
  -- {89, 86, 85},
  -- {85, 90, 89},
  -- {88, 87, 91},
  -- {91, 92, 88},
  -- {93, 89, 90},
  -- {90, 94, 93},
  -- {92, 91, 95},
  -- {96, 93, 94},
  -- {97, 98, 95},
  -- {96, 99, 100},
  -- {95, 101, 97},
  -- {100, 102, 96},
  -- {91, 103, 101},
  -- {101, 95, 91},
  -- {93, 96, 102},
  -- {87, 104, 103},
  -- {103, 91, 87},
  -- {102, 105, 89},
  -- {89, 93, 102},
  -- {81, 106, 104},
  -- {104, 87, 81},
  -- {105, 107, 86},
  -- {86, 89, 105},
  -- {83, 108, 106},
  -- {106, 81, 83},
  -- {107, 100, 84},
  -- {84, 86, 107},
  -- {1, 77, 109},
  -- {110, 78, 5},
  -- {77, 98, 97},
  -- {97, 109, 77},
  -- {100, 99, 78},
  -- {78, 110, 100},
  -- {111, 109, 97},
  -- {75, 109, 111},
  -- {100, 110, 76},
  -- {83, 75, 111},
  -- {111, 108, 83},
  -- {100, 76, 84},
  -- {1, 109, 75},
  -- {76, 110, 5},
  -- {111, 97, 101},
  -- {111, 101, 103},
  -- {100, 105, 102},
  -- {111, 103, 104},
  -- {111, 104, 106},
  -- {105, 100, 107},
  -- {108, 111, 106},
  -- {95, 98, 112},
  -- {112, 113, 95},
  -- {114, 99, 96},
  -- {96, 115, 114},
  -- {92, 95, 113},
  -- {113, 116, 92},
  -- {115, 96, 94},
  -- {94, 117, 115},
  -- {88, 92, 116},
  -- {116, 118, 88},
  -- {117, 94, 90},
  -- {90, 119, 117},
  -- {82, 88, 118},
  -- {118, 120, 82},
  -- {119, 90, 85},
  -- {85, 121, 119},
  -- {83, 82, 120},
  -- {120, 72, 83},
  -- {121, 85, 84},
  -- {84, 74, 121},
  -- {72, 113, 112},
  -- {114, 115, 74},
  -- {72, 120, 116},
  -- {116, 113, 72},
  -- {117, 121, 74},
  -- {74, 115, 117},
  -- {120, 118, 116},
  -- {117, 119, 121},
  -- {72, 75, 83},
  -- {84, 76, 74},
  -- {112, 80, 72},
  -- {74, 79, 114},
  -- {77, 80, 112},
  -- {112, 98, 77},
  -- {114, 79, 78},
  -- {78, 99, 114},
}

  -- 半径10の正八面体の24個
-- poly_vertices = {
--   {-10.00, 0.00, 0.00},
--   {0.00, 10.00, 0.00},
--   {0.00, 0.00, 10.00},
--   {10.00, 0.00, 0.00},
--   {0.00, -10.00, 0.00},
--   {0.00, 0.00, -10.00},
--   {0.00, 10.00, 0.00},
--   {10.00, 0.00, 0.00},
--   {0.00, 0.00, -10.00},
--   {-10.00, 0.00, 0.00},
--   {0.00, -10.00, 0.00},
--   {0.00, 0.00, 10.00},
--   {-10.00, 0.00, 0.00},
--   {0.00, 0.00, -10.00},
--   {0.00, -10.00, 0.00},
--   {0.00, 10.00, 0.00},
--   {0.00, 0.00, 10.00},
--   {10.00, 0.00, 0.00},
--   {0.00, 0.00, -10.00},
--   {-10.00, 0.00, 0.00},
--   {0.00, -10.00, 0.00},
--   {0.00, 0.00, 10.00},
--   {10.00, 0.00, 0.00},
--   {0.00, 10.00, 0.00},
--   {0.00, 0.00, -10.00},
--   {0.00, -10.00, 0.00},
--   {-10.00, 0.00, 0.00},
--   {0.00, 0.00, 10.00},
--   {10.00, 0.00, 0.00},
--   {0.00, 10.00, 0.00},
--   {0.00, 0.00, -10.00},
--   {0.00, -10.00, 0.00}
-- }

--立方体
  poly_vertices = {
    {0.00, 0.00, 10.00},
    {10.00, 0.00, 10.00},
    {0.00, 10.00, 10.00},
    {10.00, 10.00, 10.00},
    {0.00, 10.00, 10.00},
    {10.00, 0.00, 10.00},
    {10.00, 0.00, 10.00},
    {10.00, 0.00, 0.00},
    {10.00, 10.00, 10.00},
    {10.00, 10.00, 0.00},
    {10.00, 10.00, 0.00},
    {10.00, 10.00, 10.00},
    {10.00, 0.00, 0.00},
    {0.00, 0.00, 0.00},
    {10.00, 10.00, 0.00},
    {0.00, 10.00, 0.00},
    {0.00, 0.00, 0.00},
    {0.00, 10.00, 0.00},
    {0.00, 10.00, 10.00},
    {0.00, 0.00, 10.00},
    {0.00, 0.00, 0.00},
    {0.00, 10.00, 10.00},
    {10.00, 10.00, 10.00},
    {0.00, 10.00, 0.00},
    {10.00, 10.00, 10.00},
    {10.00, 0.00, 0.00},
    {0.00, 0.00, 0.00},
    {10.00, 0.00, 10.00},
    {0.00, 0.00, 0.00},
  }

  function createPolygon(poly_data)
  local poly_vertices = {}

  for _, vertex in ipairs(poly_data) do
    table.insert(poly_vertices, {vertex[1], vertex[2], vertex[3]})
  end

  return poly_vertices
end

  -- Lua側でテーブルを受け取る関数
  function receiveTable(poly_vertices, count)
    -- テーブルの中身を表示
    
    for i, vertex in ipairs(poly_vertices) do
      print(string.format("Vertex %d: %.2f, %.2f, %.2f", i, vertex[1], vertex[2], vertex[3]))
    end
  
    -- ポリゴンの数を表示
    -- print("Polygon count: " .. count)
  end


-- オブジェクトの位置
local objx = 0
local objy = 0
local objz = 0
local objangle = 0
-- カメラの初期位置と方向
local camera = {
  x = 0,  -- X座標
  y = 0,  -- Y座標
  z = 0,  -- Z座標
  angle = 0,  -- 回転角度
  zoom = 1.0,  -- ズーム倍率
}

function mapvertex(vrtcs, points)
  local index = 1

  for _, vertex in ipairs(vrtcs) do
    local x, y, z = vertex[1], vertex[2], vertex[3]

    -- オブジェクト座標系での座標変換
    local x2 = x - objx
    local y2 = y - objy
    local z2 = z - objz

    -- カメラ座標系での座標変換
    local cos = math.cos(camera.angle+objangle)
    local sin = math.sin(camera.angle+objangle)
    local transformedX = x2 * cos - z2 * sin - camera.x
    local transformedZ = z2 * cos + x2 * sin - camera.y
    local transformedY = y2 - camera.z

    -- パースペクティブ補正とズーム適用
    local scale = 640 / (64 - transformedZ) * camera.zoom
    local sx = transformedX * scale + 64
    local sy = transformedY * scale + 64
    
    -- テーブルに座標を追加する
    points[index] = {}
    points[index].x = flr(sx)
    points[index].y = flr(sy)
    index = index + 1
  end

  line(points[1].x, points[1].y, points[2].x, points[2].y, 7)
  line(points[2].x, points[2].y, points[3].x, points[3].y, 7)
  line(points[3].x, points[3].y, points[1].x, points[1].y, 7)

end

function _update()
  frame = frame + 1
  -- objangle = objangle + 0.1
  camera.angle = camera.angle + 0.01
  if camera.angle > 6.28 then 
    camera.angle = 0
  end
  -- カメラの移動と回転
  -- if btn(1) >= 2 then
  --   camera.x = camera.x + 1  -- 左に移動
  -- elseif btn(2) >= 2 then
  --   camera.x = camera.x - 1  -- 右に移動
  -- end
  btn(1,2,1,camera.x) 

  -- if btn(3) >= 2 then
  --   camera.y = camera.y + 1  -- 上に移動
  -- elseif btn(4) >= 2 then
  --   camera.y = camera.y - 1  -- 下に移動
  -- end
  btn(3,4,1,camera.y) 

  -- if btn(5) >= 2 then
  --   camera.angle = camera.angle - 0.05  -- 前に移動
  -- elseif btn(7) >= 2 then
  --   camera.angle = camera.angle + 0.05  -- 後ろに移動
  -- end
  btn(5,7,0.05,camera.angle) 
  
  -- if btn(6) >= 2 then
  --   camera.zoom = camera.zoom - 0.05  -- 左に回転
  -- elseif btn(8) >= 2 then
  --   camera.zoom = camera.zoom + 0.05  -- 右に回転
  -- end
  btn(6,8,0.05,camera.zoom) 
end 

function _draw()
  cls()
  -- receiveTable(poly_vertices, count)
  print(camera.x,0,0)
  print(camera.y,0,0)
  print(camera.z,0,0)
  print(camera.angle,0,0)
  print(camera.zoom,0,0)

  for i = 0, #poly_vertices do
    local poly_vertices1 = {}
    poly_vertices1[1] = poly_vertices[i*3+1]
    poly_vertices1[2] = poly_vertices[i*3+2]
    poly_vertices1[3] = poly_vertices[i*3+3]
    mapvertex(poly_vertices1, points)
  end
end

-------------------------------------------------------
function setup()--init
  _init()

end
function loop()--update --draw
_update()
_draw()
end







